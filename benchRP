#!/usr/bin/env python3
"""benchRP  -  Results Parser for SETI MB Benchmark Tools

  Utility to output a pipe delimitted file, which also expands command line arguments with argument name
  in the header and argument value as data.  This is intended to facilitate the analysis of the sensitivity
  of processing speed and accuracy as a function of command line tuning options.  It is able to process the 
  output of  the Windows based MB_bench_213 benchmark utility or the Linux based benchMT pst file.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2018 RueiKe"
__credits__ = ""
__license__ = "GNU General Public License"
__program_name__ = "benchRP"
__version__ = "v1.00"
__maintainer__ = "RueiKe"
__status__ = "Initial Release"

import argparse
import re
import os

class RP_CONST:
    def __init__(self):
        self.input_file = ""
        self.output_file = ""
        self.format = "MB213"          # default is MTpsv
        self.DEBUG = False
rb_const=RP_CONST()


class MB_args:
    def __init__(self, name):
        self.argvals = {
        "name" : name,
        "appname" : "",
        "WU" : "", 
        "device" : 1,
        "nog" : False,
        "v" : -1,
        "period_iterations_num" : -1,
        "pref_wg_size" : -1,
        "pref_wg_num_per_cu" : -1,
        "spike_fft_thresh" : -1,
        "sbs" : -1,
        "hp" : False,
        "high_prec_timer" : False,
        "cpu_lock" : False,
        "total_GPU_instances_num" : -1,
        "cpu_lock_fixed_cpu" : -1,
        "no_cpu_lock" : False,
        "no_defaults_scaling" : False,
        "high_perf" : False,
        "low_perf" : False,
        "instances_per_device" : -1,
        "gpu_lock" : False,
        "use_sleep" : False,
        "use_sleep_ex" : -1,
        "no_use_sleep" : False,
        "sleep_quantum" : -1,
        "sleep_margin" : -1.0,
        "tt" : -1,
        "no_caching" : False,
        "nographics" : False,
        "tune" : [-1, -1, -1, -1],
        "oclfft_tune_gr" : -1,
        "oclfft_tune_lr" : -1,
        "oclfft_tune_wg" : -1,
        "oclfft_tune_ls" : -1,
        "oclfft_tune_bn" : -1,
        "oclfft_tune_cw" : -1,
        "elapsed_time" : -1,
        "cpu_time" : -1
        }

    def headerLine(self):
        _separator = "|"
        return _separator.join(list(self.argvals.keys()))


    def dataLine(self):
        _separator = "|"
        _outdataline = ""
        return _separator.join(list(map(str, list(self.argvals.values()))))

    def addData(self, _optline):
        if rb_const.DEBUG: print("Optline value: [" + _optline + "]")
        _separator = ","
        _optline = _optline.replace('-','')
        _optv = _optline.split(' ')
        _opt = _optv[0]

        if (_opt in self.argvals) == False:
            print("Invalid arg value: [", _opt, "]")
            return
        _len = len(_optv)

        if _len > 3:
           _optarg = _optv[1:_len]
           _optarg = _separator.join(_optv[1:_len])
           _optarg = re.sub(r'^[\s]*', '', _optarg)
           _optarg = re.sub(',$', '', _optarg)
           if rb_const.DEBUG: print("Optarg value: [" + _optarg + "]")
        elif _len == 3:
           _optarg = _optv[1]
           _optarg = re.sub(r'^[\s]*', '', _optarg)
        else: 
           _optarg = True

        if _opt == "v" or _opt == "period_iterations_num" or _opt == "pref_wg_size" or _opt == "pref_wg_num_per_cu"  \
           or _opt == "spike_fft_thresh" or _opt == "sbs" or _opt == "total_GPU_instances_num" \
           or _opt == "cpu_lock_fixed_cpu" or _opt == "instances_per_device" or _opt == "use_sleep_ex" \
           or _opt == "sleep_quantum" or _opt == "tt" or _opt == "oclfft_tune_gr" or _opt == "oclfft_tune_lr" \
           or _opt == "oclfft_tune_wg" or _opt == "oclfft_tune_ls" or _opt == "oclfft_tune_bn" \
           or _opt == "oclfft_tune_cw" or _opt == "device":
           self.argvals[_opt] = int(_optarg)
           return

        if _opt == "hp" or _opt == "high_prec_timer" or _opt == "cpu_lock" or _opt == "no_cpu_lock" \
           or _opt == "no_defaults_scaling" or _opt == "high_perf" or _opt == "low_perf" or _opt == "gpu_lock" \
           or _opt == "use_sleep" or _opt == "no_use_sleep" or _opt == "nog" or _opt == "no_caching" or _opt == "nographics":
           self.argvals[_opt] = True
           return

        if _opt == "sleep_margin":
           self.argvals[_opt] = float(_optarg)
           return

        if _opt == "tune":
           if rb_const.DEBUG: print("tune value: [" , _optarg.split(',') , "]")
           self.argvals[_opt] = list(map(int, _optarg.split(',')))
           if rb_const.DEBUG: print("tune argument is:", _optarg, ":", "tuneopts is:", self.argvals[_opt])
           return

        print("Invalid arg value: ", _opt)
        return

def parse_MTpsv():
    infileptr = open(rb_const.input_file, 'r') 
    outfileptr = open(rb_const.output_file, 'w')
    mbItem = MB_args(rb_const.input_file)

    header = True
    for line in infileptr:
        orig_line = line.strip()
        line = orig_line.replace('--','-')
        if rb_const.DEBUG: print(line)
        lineitems = line.split('|')
        if header == True:
            header = False
            app_arg_index = 0
            for header_val in lineitems:
                if header_val == "app_args":
                    new_header = mbItem.headerLine()
                    new_header_items = new_header.split('|')
                    new_header = orig_line +"|"+ "|".join(new_header_items[3:])
                    outfileptr.write(new_header + '\n')
                    break
                else:
                    app_arg_index += 1
            continue
        if rb_const.DEBUG: print("App_args Index = [", app_arg_index, "]")

        app_arg_str = lineitems[app_arg_index]
        if rb_const.DEBUG: print("app_arg_str:", app_arg_str)
        app_arg_items = app_arg_str.split('-')
        for arg in app_arg_items:
            if arg == "" or arg == " ": continue
            mbItem.addData(arg)
        #for i in range(1,len(app_arg_items)):
            #mbItem.addData(app_arg_items[i])
        new_dataline = mbItem.dataLine()
        new_dataline_items = new_dataline.split('|')
        new_dataline = orig_line +"|"+ "|".join(new_dataline_items[3:])
        outfileptr.write(new_dataline + '\n')

    infileptr.close()
    outfileptr.close()

def parse_MB213():
    infileptr = open(rb_const.input_file, 'r') 
    outfileptr = open(rb_const.output_file, 'w')

    dataFlag = False
    wuName = "None"

    for line in infileptr:
        # Find beginning of data table
        if dataFlag == False:
            searchObj = re.search('Quick timetable', line)
            if searchObj != None:
                mbItem = MB_args(rb_const.input_file)
                outfileptr.write(mbItem.headerLine())
                outfileptr.write('\n')
                dataFlag = True
                if rb_const.DEBUG: print(line)
            continue

        line = line.replace('\n', '')
        line = line.replace('\r', '')
        line = line.replace(' :', '')
        #Find WU name
        searchObj=re.search('^WU', line)
        if searchObj != None:
            lineitems = line.split(' ')
            wuName = lineitems[1]
            if rb_const.DEBUG: print("WU is ", wuName)
            continue

        #Find data line begining with application name
        searchObj=re.search('^MB', line)
        if searchObj != None:
            mbItem = MB_args(rb_const.input_file)
            mbItem.argvals["WU"] = wuName

            lineitems = line.split('-')
            mbItem.argvals["appname"] = lineitems[0].replace(' ', '')
            if rb_const.DEBUG: print(lineitems)
            option = ""
            optionarg = ""
            for i in range(1,len(lineitems)):
                mbItem.addData(lineitems[i])

        #Find data for Elapsed and CPU Time
        line = re.sub(r'^[\s]*', '', line)
        searchObj = re.search('^Elapsed', line)
        if searchObj != None:
            lineitems = line.split(' ')
            mbItem.argvals["elapsed_time"] = lineitems[1].replace(' ', '')
            continue
        searchObj = re.search('^CPU', line)
        if searchObj != None:
            lineitems = line.split(' ')
            mbItem.argvals["cpu_time"] = lineitems[1].replace(' ', '')
            outfileptr.write(mbItem.dataLine())
            outfileptr.write('\n')

    infileptr.close()
    outfileptr.close()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--format_MB213", help="Parse MB_bench_213 format, instead of MTpsv", action="store_true", default=False)
    parser.add_argument("--format_MTpsv", help="Parse benchMT psv format", action="store_true", default=False)
    parser.add_argument("--overwrite", help="Overwrite the output file if it exists", action="store_true", default=False)
    parser.add_argument("--input_file", help="Specify input file name", type=str, default="")
    parser.add_argument("--output_file", help="Specify output file name", type=str, default="")
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()

    if args.about == True :
        print(__doc__ )
        print("Author: ", __author__ )
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        exit(0)

    if args.input_file == "" or args.output_file == "":
        print("Input file must be specified, exiting...")
        exit(-1)
    rb_const.input_file = args.input_file
    if(os.path.isfile(rb_const.input_file) == False):
        print("Input file [", rb_const.input_file,"] doesn't exist, exiting...")
        exit(-1)

    rb_const.output_file = args.output_file
    if(os.path.isfile(rb_const.output_file) == True):
        if args.overwrite == True:
            print("Output file [", rb_const.output_file,"] exists, overwritting...")
        else:
            print("Output file [", rb_const.output_file,"] exists, exiting...")
            exit(-1)

    if args.debug:
        print("Debug output enabled")
        rb_const.DEBUG = True

    if args.format_MB213 == True:
        parse_MB213()
    else:
        parse_MTpsv()


if __name__ == "__main__":
    main()

